// 
// / {
//         keymap {
//                 compatible = "zmk,keymap";
// 
//                 default_layer {
// // -----------------------------------------------------------------------------------------
// // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
// // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
// //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
//                         bindings = <
//    &kp TAB   &kp Q &msc SCRL_LEFT    &mmv MOVE_UP    &msc SCRL_RIGHT &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
//    &kp LCTRL &kp A &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
//    &kp LSHFT &kp Z &mkp LCLK  &msc SCRL_UP &msc SCRL_DOWN &mkp RCLK   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp ESC
//                   &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
//                         >;
//                 };
//                 lower_layer {
// // -----------------------------------------------------------------------------------------
// // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
// //                    | GUI |     | SPC |   | ENT |     | ALT |
//                         bindings = <
//    &kp TAB    &kp TAB       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
//    &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &none &none
//    &kp LSHFT  &kp LSHFT       &bt BT_CLR       &none       &none       &none         &none   &none   &none &none    &none &none
//                                     &kp LGUI     &none       &kp SPACE      &kp RET  &none   &kp RALT
//                         >;
//                 };
// 
//                 raise_layer {
// // -----------------------------------------------------------------------------------------
// // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
// // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
// //                    | GUI |     | SPC |   | ENT |     | ALT |
//                         bindings = <
//    &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
//    &kp LCTRL &none   &none &none   &none   &none      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
//    &kp LSHFT &none   &none &none   &none   &none      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
//                              &kp LGUI &none   &kp SPACE   &kp RET   &none    &kp RALT
//                         >;
//                 };
//         };
// };


/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>


#define ZMK_POINTING_DEFAULT_MOVE_VAL 2000  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20 

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

// &mmv {
//    time-to-max-speed-ms = <680>;
//    acceleration-exponent=<2>;
// };
/ { 

	kscan: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";
        wakeup-source;
    };


    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
	td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
                // -----------------------------------------------------------------------------------------
                // | none |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | none |
                // | none |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | none |
                // | none |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | none |
                //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
		bindings = <
		&none    &kp Q    &kp W    &kp E         &kp R         &kp T 				&kp Y    &kp U         &kp I         &kp O      &kp P       &none
		&none    &kp A    &kp S    &hm LALT D    &hm LCTRL F    &kp G 			       	&kp H    &hm RCTRL J    &hm RALT K    &kp L      &kp SEMI    &none
		&none    &kp Z    &kp X    &kp C         &kp V         &kp B				&kp N    &kp M         &kp COMMA     &kp DOT    &kp FSLH    &none
          			         &sk LSHIFT    &sk LGUI    &kp SPACE                           &kp RET  &kp BACKSPACE    &to 1
		>;
		};

       		left_layer {
                // -----------------------------------------------------------------------------------------
                // | none |  ESC  |  @  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | none |
                // | none |  TAB  |  =  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  | none |
                // | none |   ~   |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | none |
                //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
		bindings = <
		&none    &kp ESC      &kp AT        &td LC(LG(LS(N4))) LS(N3)    &kp DLLR            &kp PRCNT		                &kp CARET    &kp LS(COMMA)    &kp LS(DOT)    &kp SEMI    &kp BKSP    &none
		&none    &kp TAB      &kp EQUAL     &kp LA(RBKT)                 &kp LA(LS(RBKT))    &kp SQT 		                &kp BSLH     &kp LBRC         &kp RBRC       &kp PIPE    &kp ENTER   &none
		&none    &kp TILDE    &kp LA(N3)    &kp LA(LBKT)                 &kp LA(LS(LBKT))    &kp DQT                           &kp LBKT     &kp LPRN         &kp RPRN       &kp RBKT    &to 3       &none
					                                        &to 0    &sk LGUI    &kp SPACE                           &kp RET    &sk RALT    &to 2 
		>;
		};

		right_layer {
		bindings = <
		&none    &kp ESC    &kp C_PP    &kp C_PREV      &kp C_NEXT      &kp LS(MINUS)    		                        &kp MINUS    &kp N7    &kp N8    &kp N9    &none       &none 
		&none    &kp TAB    &none      &kp C_VOL_DN    &kp C_VOL_UP    &kp LS(EQUAL) 			                        &kp EQUAL    &kp N4    &kp N5    &kp N6    &kp ENTER    &none 
		&none    &to 4      &kp AMPS    &kp SLASH       &kp STAR        &kp DOT    			                        &kp N0       &kp N1    &kp N2    &kp N3    &none       &none 
					                        &to 0    &sk LGUI    &kp SPACE                                          &kp RET	   &sk RALT    &to 4 
		>;
		};
							 
		tri_layer {
		bindings = <
		&none    &none                 &msc SCRL_LEFT    &mmv MOVE_UP      &msc SCRL_RIGHT    &kp NUM_5 			&kp LG(LBKT)   &kp LC(LS(TAB))   &kp RC(TAB) &kp LG(RBKT) &none &none
		&none    &kp F1                 &mmv MOVE_LEFT    &mmv MOVE_DOWN    &mmv MOVE_RIGHT    &kp DEL  						&kp LEFT &kp DOWN  &kp UP &kp RIGHT &kp ENTER  &none
		&none    &td LG(GRAVE) GRAVE    &mkp LCLK         &msc SCRL_UP      &msc SCRL_DOWN     &mkp RCLK   				&mkp LCLK &kp PG_DN  &kp K_VOL_DN  &none &none    &none
					 &to 0 &none &none  					&none &sk RALT &to 1 
		>;
		};

		bt_layer {
		bindings = <
		&none    &none                 &none    &none      &none    &none 			&none   &none   &none &none &none &none
		&none    &none                 &none    &none    &none    &none  						&none &none  &none &none &none  &none
		&none    &bt BT_PRV    &bt BT_NXT         &bt BT_CLR      &bootloader     &none   				&none &bootloader  &none  &none &none    &none
					 &to 0 &none &none  					&none &none &to 1 
		>;
		};	
        
	};
};


// &none    &kp Y    &kp C    &kp L    &kp M    &kp K 						&kp Z &kp F  &kp U    &td MINUS COMMA  &kp BKSP  &none
// 		&none    &kp I    &kp S    &hm LALT R &hm LGUI T    &kp G 			       	&kp P &hm RGUI N &hm RALT E &kp A &kp O &none
// 		&none    &kp Q    &kp V    &kp W    &kp D    &kp J				        &kp B &kp H  &td UNDERSCORE SLASH &td EXCL DOT &kp X &none
//           				&mt LC(LS(LALT)) SPC &sk LSHIFT  				&sk RCTRL &to 1




//left_layer {
//		bindings = <
//		&kp ESC  &kp ATSN   &td LC(LG(LS(N4))) LS(N3) &kp DLLR    &kp PRCNT		&kp CARET &kp LS(COMMA) &kp LS(DOT) &kp SEMI &kp BKSP 
//		&kp TAB    &kp EQUAL    &kp LA(RBKT)      &kp LA(LS(RBKT))     &kp SQT 		&kp BSLH &kp LBRC  &kp RBRC &kp PIPE  &kp ENTER
//		&kp TILDE    &kp LA(N3) 	&kp LA(LBKT) &kp LA(LS(LBKT))  &kp DQT 	&kp LBKT &kp LPRN &kp RPRN &kp RBKT  &to 3 
//					    &to 0  &sk LSHIFT  					&sk RALT &to 2 
//		>;
//		};
